Как запустить ноду Mineplex и превратить ее в Pool
==================================================

В этом гайде мы пошагово установим и запустим ноду Mineplex, синхронизируем все блоки и запустим процессы по выпечке/подтверждения блоков

Установка
=========

Выбор среды разработки
~~~~~~~~~~~~~~~~~~~~~~

Mineplex был разработан под Linux x86_64, в основном под Debian/Ubuntu и Archlinux.

Перечисленные ОС на которых вы также можете запустить:

- macOS/x86_64
- Linux/aarch64 (64 bits) (Raspberry Pi3 и т.п.)

Версия под Windows возможна в будущем.

Настройка окружения
~~~~~~~~~~~~~~~~~~~

::

   sudo apt install -y rsync git m4 build-essential patch unzip wget pkg-config libgmp-dev libev-dev libhidapi-dev libffi-dev opam jq
   add-apt-repository ppa:avsm/ppa
   apt update
   apt install opam

Далее, вам необходимо создать нового пользователя
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   sudo adduser mineplex
   su mineplex

Получение исходного кода
~~~~~~~~~~~~~~~~~~~~~~~~

::

   cd ~
   git clone https://github.com/mineplexio/Plexus-Pool.git -b mineplex-beta-protocol mineplex.blockchain
   cd mineplex.blockchain

Установка rustup
~~~~~~~~~~~~~~~~

::

   opam init --bare
    
   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
   source $HOME/.cargo/env
   rustup set profile minimal
   rustup toolchain install 1.39.0
   rustup default 1.39.0
   source $HOME/.cargo/env

Установка OCaml и зависимостей Mineplex
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::
   
   make build-deps

После установки всего необходимого, мы можем скомпилировать проект
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   eval $(opam env)
   mkdir src/proto_001_Pt8PXNHh/parameters
   make

Запуск ноды
===========

Проверка директории
~~~~~~~~~~~~~~~~~~~

После компиляций директория mineplex.blockchain должна пополниться следующими файлами:

- ``mineplex-node``: Нода;
- ``mineplex-client``: Командная строка клиента и кошелек;
- ``mineplex-admin-client``: Инструменты администраторы ноды;
- ``mineplex-{baker,endorser,accuser}``: Процессы создания/подтверждения/ловли двойной выпечки;
- ``mineplex-signer``: Клиент для удаленного подписания процессов и блоков;

Идентификация ноды
~~~~~~~~~~~~~~~~~~
Первым делом нам необходимо сгенерировать идентификатор, чтобы нода смогла подключиться к сети
::

    ./mineplex-node config init --data-dir ~/mineplex-mainnet
    ./mineplex-node identity generate --data-dir ~/mineplex-mainnet

Запуск ноды и синхронизация блоков
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

   ./mineplex-node run  --data-dir ~/mineplex-mainnet --rpc-addr 127.0.0.1:8732 --connections 15

Не завершайте данный процесс, держите данную команду запущенной на протяжений всего времени.

Процесс синхронизации занимает большое количество времени. Поэтому рекомендую запустить данный процесс в фоне. Либо вам придется держать сессию открытой (примерно день). Есть два способа благодаря которым вы поймете синхронизирована ли ваша нода:

- На старте ваша нода будет затрачивать по ~1 секунде на каждый блок. Если вы заметили, что на каждый блок уходит по одной минуте, значит ваша нода синхронизирована. Т.к. внутри блокчейна на каждый блок уходит по 1 минуте, ваша нода дожидается новых блоков
- Используйте команду ``./mineplex-client -endpoint http://127.0.0.1:8732/ bootstrapped`` При успешной синхронизации команда вернет ``Node is bootstrapped.``

Создание/Импортирование кошелька
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``Если вы хотите создать отдельный кошелек для ноды используйте эти команды:``
::

      ./mineplex-client -endpoint http://127.0.0.1:8732/ gen keys bob

Bob - имя вашего кошелька внутри ноды. Вы можете использовать любое другое, которое вы хотите

``Если вы хотите импортировать ваш существующий кошелек:``
::

      ./mineplex-client add address bob mp1.......... <-- (Адресс кошелька)
      ./mineplex-client import secret key bob unencrypted:edsk....... <-- (Ваш секретный ключ. Аргумент unencrypted: оставить)

Метка для тех, кто планирует поднимать Pool. Если вы импортируете ваш кошелек, в будущем, при успешном получений прав делегата, вы не сможете закидывать свои Mine в другие Pool.

После создания/импортирования кошелька проверьте командой:
::

      ./mineplex-client -endpoint http://127.0.0.1:8732/ list known contracts

Проверка баланса Mine/Plex
~~~~~~~~~~~~~~~~~~~~~~~~~~

Проверка баланса Mine:
::

    ./mineplex-client -endpoint http://127.0.0.1:8732/ get mine_balance for bob

Проверка баланса Plex:
::

    ./mineplex-client -endpoint http://127.0.0.1:8732/ get balance for bob

Вывод Mine/Plex из ноды
~~~~~~~~~~~~~~~~~~~~~~~

Вывод Mine:
::

  ./mineplex-client -endpoint http://127.0.0.1:8732/ mine_transfer 1000 from bob to mp1..... <-- (Адрес кошелька куда необходимо вывести Mine)

Вывод Plex:
::

  ./mineplex-client -endpoint http://127.0.0.1:8732/ plex_transfer 10 from bob to mp1..... <-- (Адрес кошелька куда необходимо вывести Plex)

``Поздравляю, ваша нода успешно развернута``

Поднятие Pool
=============

Раздел для тех, кто хочет стать активном пулом сети. Вы сможете создавать блоки, подтверждать и получать за это награды

Для работы Pool, на вашем балансе должно лежать минимум 2.000.000 Mine. Не беспокойтесь, данные Mine останутся у вас, они служат в качестве депозита. За каждое создание блока берется депозит в 6000 Mine, за подтверждение 200 Mine. После разморозки добытых Plex депозит вернется к вам.

В сети распределение задач происходит случайным образом исходя из вашего ролла. 1 ролл = 1.000.000 Mine. Для примера, если на вашем балансе лежит 2.700.000 Mine, ваш ролл будет равен 2.

Регистрация и получение прав
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

   ./mineplex-client -endpoint http://127.0.0.1:8732/ register key bob as delegate

Делегирование Mine в Pool
~~~~~~~~~~~~~~~~~~~~~~~~~
::

   ./mineplex-client -endpoint http://127.0.0.1:8732/ set delegate for address to bob <-- (address заменить на ваш адресс)

Вам необходимо подождать 7 циклов, после запуска, после этого времени вы начнете создавать/подтверждать/контролировать двойную выпечку.

А пока, вы можете запустить все процессы. (Все процессы нужно запускать в фоне)

Запуск Baker (Создание блоков)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

   ./mineplex-baker-001-Pt8PXNHh run with local node ~/mineplex-mainnet bob

Запуск Endorser (Подтверждение блоков)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

   ./mineplex-endorser-001-Pt8PXNHh run

Запуск Accuser (Обвинитель)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Это процесс, который проверяет все блоки в сети. И ищет Pool который создает двойные блоки и подтверждает несколько раз один и тот же блок на одном слоте. Если он найдет такой Pool, нарушитель потеряет весь свой депозит. Поэтому, внимательно контролируйте запущенные процессы. На одном Pool должен быть запущен только один Baker и только один Endorser.
::

   ./mineplex-accuser-001-Pt8PXNHh run

``Всё, поздравляю вас, теперь вы часть блокчейна. Как только к вашему Pool подключатся другие люди, вам нужно будет позаботиться об выплате Plex.``

Запуск и настройка скриптов по выплатам
=======================================

Установка
~~~~~~~~~
::

   cd
   git clone https://github.com/mineplexio/Pool-Script.git
   cd Pool-Script
   git submodule update --remote
   cd js-rpcapi; npm install; cd

Настройка
~~~~~~~~~
::

   cd Pool-Script
   cp config-example.js config.js
   nano config.js

Перед вами появятся основные настройки по выплатам:
::

   module.exports = {
  "NODE_RPC": "http://127.0.0.1:8732/",
  "MONGO_URL": "mongodb://localhost:27017/dbname",
  "START_INDEXING_LEVEL": 350160,
  "BAKER_LIST": [
    "address" <-- Вставьте адрес вашего Pool
  ],
  "PAYMENT_SCRIPT": {
    "ENABLED_AUTOPAYMENT": true, // Автоматически ежедневно выплачивает Plex.
    "AUTOPAYMENT_LEVEL": 10, // 5 - выплачивает по утрам, 10 - выплачивает по вечерам
    "BAKER_PRIVATE_KEYS": [
      "privatekey" <-- Вставьте приватный ключ вашего Pool
    ],
    "MIN_PAYMENT_AMOUNT": 0.1, // Минимальная награда в PLEX
    "DEFAULT_BAKER_COMMISSION": 0.1, // Комиссия которую берет себе пул за создание блоков 1 = 100%, 0.1 = 10%
    "BAKERS_COMMISSIONS": {
      "address1" : 0.15,
      "address2" : 0.1,
    },
    "ADDRESSES_COMMISSIONS": { // Вы можете поставить разную комиссию на каждый адрес 
      "address3" : 0,
    },
    "MAX_COUNT_OPERATIONS_IN_ONE_BLOCK": 199
  }

Запуск скрипта
~~~~~~~~~~~~~~
Запускайте в фоне
::

   npm run start